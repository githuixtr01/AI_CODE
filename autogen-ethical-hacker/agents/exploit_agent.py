from autogen_agentchat.agents import AssistantAgent
from tools.metasploit_tool import run_exploits
from groq import Groq


class ExploitAgent(AssistantAgent):
    def __init__(self, apis, lab_scope, tools_config):
        groq_api = apis.get('groq', {}).get('api_key', '')
        self.groq_client = Groq(api_key=groq_api)
        super().__init__(
            name="ExploitAgent",
            model_client=self.groq_client,
            system_message="You execute exploits and post-exploitation modules using Metasploit."
        )
        self.lab_scope = lab_scope
        self.tools_config = tools_config
        self.results = None
        self.local_tools = {}
        self.local_tools['run_exploits_tool'] = self.run_exploits_tool

    def run_exploits_tool(self, vuln_results):
        if not vuln_results:
            print("[ExploitAgent] No vulnerability results provided.")
            return {}
        try:
            return run_exploits(vuln_results)
        except Exception as e:
            print(f"[ExploitAgent] Exploit execution failed: {e}")
            return {"error": str(e)}

    def run(self, vuln_results):
        self.results = self.run_exploits_tool(vuln_results)
        print(f"[ExploitAgent] Exploit results: {self.results}")
        return self.results
